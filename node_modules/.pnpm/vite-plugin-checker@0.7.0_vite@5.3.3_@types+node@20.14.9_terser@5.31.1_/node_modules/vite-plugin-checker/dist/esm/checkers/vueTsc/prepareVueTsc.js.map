{"version":3,"sources":["../../../../src/checkers/vueTsc/prepareVueTsc.ts"],"sourcesContent":["import fsExtra from 'fs-extra'\nimport { createRequire } from 'module'\nimport path, { dirname } from 'path'\nimport { fileURLToPath } from 'url'\nimport { writeFile, access, readFile, rm } from 'fs/promises'\n\nconst { copy, mkdir } = fsExtra\nconst _require = createRequire(import.meta.url)\n\n// isomorphic __dirname https://antfu.me/posts/isomorphic-dirname\nconst _filename = fileURLToPath(import.meta.url)\nconst _dirname = dirname(_filename)\nlet proxyApiPath = _require.resolve('@volar/typescript/lib/node/proxyCreateProgram')\nlet runExtensions = ['.vue']\n\nexport async function prepareVueTsc() {\n  // 1. copy typescript to folder\n  const targetTsDir = path.resolve(_dirname, 'typescript-vue-tsc')\n  const vueTscFlagFile = path.resolve(targetTsDir, 'vue-tsc-resolve-path')\n  const currTsVersion = _require('typescript/package.json').version\n\n  let shouldBuildFixture = true\n  try {\n    await access(targetTsDir)\n    const targetTsVersion = _require(path.resolve(targetTsDir, 'package.json')).version\n    // check fixture versions before re-use\n    await access(vueTscFlagFile)\n    const fixtureFlagContent = await readFile(vueTscFlagFile, 'utf8')\n    if (targetTsVersion === currTsVersion && fixtureFlagContent === proxyApiPath) {\n      shouldBuildFixture = false\n    }\n  } catch (e) {\n    // no matter what error, we should rebuild the fixture\n    shouldBuildFixture = true\n  }\n\n  if (shouldBuildFixture) {\n    await rm(targetTsDir, { force: true, recursive: true })\n    await mkdir(targetTsDir)\n    const sourceTsDir = path.resolve(_require.resolve('typescript'), '../..')\n    await copy(sourceTsDir, targetTsDir)\n    await writeFile(vueTscFlagFile, proxyApiPath)\n\n    // 2. sync modification of lib/tsc.js with vue-tsc\n    await overrideTscJs(_require.resolve(path.resolve(targetTsDir, 'lib/typescript.js')))\n  }\n\n  return { targetTsDir }\n}\n\nasync function overrideTscJs(tscJsPath: string) {\n  const languagePluginsFile = path.resolve(_dirname, 'languagePlugins.cjs')\n  let tsc = await readFile(tscJsPath, 'utf8')\n  // #region copied from https://github.com/volarjs/volar.js/blob/ae7f2e01caa08f64cbc687c80841dab2a0f7c426/packages/typescript/lib/quickstart/runTsc.ts\n  // add *.vue files to allow extensions\n  const extsText = runExtensions.map((ext) => `\"${ext}\"`).join(', ')\n  tsc = replace(tsc, /supportedTSExtensions = .*(?=;)/, (s) => s + `.concat([[${extsText}]])`)\n  tsc = replace(tsc, /supportedJSExtensions = .*(?=;)/, (s) => s + `.concat([[${extsText}]])`)\n  tsc = replace(tsc, /allSupportedExtensions = .*(?=;)/, (s) => s + `.concat([[${extsText}]])`)\n\n  // proxy createProgram\n  tsc = replace(\n    tsc,\n    /function createProgram\\(.+\\) {/,\n    (s) =>\n      `var createProgram = require(${JSON.stringify(proxyApiPath)}).proxyCreateProgram(` +\n      [\n        `new Proxy({}, { get(_target, p, _receiver) { return eval(p); } } )`,\n        `_createProgram`,\n        `require(${JSON.stringify(languagePluginsFile)}).getLanguagePlugins`,\n      ].join(', ') +\n      `);\\n` +\n      s.replace('createProgram', '_createProgram')\n  )\n\n  function replace(_text: string, ...[search, replace]: Parameters<String['replace']>) {\n    const before = _text\n    const text = _text.replace(search, replace)\n    const after = text\n    if (after === before) {\n      throw 'Search string not found: ' + JSON.stringify(search.toString())\n    }\n    return after\n  }\n  // #endregion\n\n  await writeFile(tscJsPath, tsc)\n}\n"],"mappings":"AAAA,OAAO,aAAa;AACpB,SAAS,qBAAqB;AAC9B,OAAO,QAAQ,eAAe;AAC9B,SAAS,qBAAqB;AAC9B,SAAS,WAAW,QAAQ,UAAU,UAAU;AAEhD,MAAM,EAAE,MAAM,MAAM,IAAI;AACxB,MAAM,WAAW,cAAc,YAAY,GAAG;AAG9C,MAAM,YAAY,cAAc,YAAY,GAAG;AAC/C,MAAM,WAAW,QAAQ,SAAS;AAClC,IAAI,eAAe,SAAS,QAAQ,+CAA+C;AACnF,IAAI,gBAAgB,CAAC,MAAM;AAE3B,eAAsB,gBAAgB;AAEpC,QAAM,cAAc,KAAK,QAAQ,UAAU,oBAAoB;AAC/D,QAAM,iBAAiB,KAAK,QAAQ,aAAa,sBAAsB;AACvE,QAAM,gBAAgB,SAAS,yBAAyB,EAAE;AAE1D,MAAI,qBAAqB;AACzB,MAAI;AACF,UAAM,OAAO,WAAW;AACxB,UAAM,kBAAkB,SAAS,KAAK,QAAQ,aAAa,cAAc,CAAC,EAAE;AAE5E,UAAM,OAAO,cAAc;AAC3B,UAAM,qBAAqB,MAAM,SAAS,gBAAgB,MAAM;AAChE,QAAI,oBAAoB,iBAAiB,uBAAuB,cAAc;AAC5E,2BAAqB;AAAA,IACvB;AAAA,EACF,SAAS,GAAP;AAEA,yBAAqB;AAAA,EACvB;AAEA,MAAI,oBAAoB;AACtB,UAAM,GAAG,aAAa,EAAE,OAAO,MAAM,WAAW,KAAK,CAAC;AACtD,UAAM,MAAM,WAAW;AACvB,UAAM,cAAc,KAAK,QAAQ,SAAS,QAAQ,YAAY,GAAG,OAAO;AACxE,UAAM,KAAK,aAAa,WAAW;AACnC,UAAM,UAAU,gBAAgB,YAAY;AAG5C,UAAM,cAAc,SAAS,QAAQ,KAAK,QAAQ,aAAa,mBAAmB,CAAC,CAAC;AAAA,EACtF;AAEA,SAAO,EAAE,YAAY;AACvB;AAEA,eAAe,cAAc,WAAmB;AAC9C,QAAM,sBAAsB,KAAK,QAAQ,UAAU,qBAAqB;AACxE,MAAI,MAAM,MAAM,SAAS,WAAW,MAAM;AAG1C,QAAM,WAAW,cAAc,IAAI,CAAC,QAAQ,IAAI,MAAM,EAAE,KAAK,IAAI;AACjE,QAAM,QAAQ,KAAK,mCAAmC,CAAC,MAAM,IAAI,aAAa,aAAa;AAC3F,QAAM,QAAQ,KAAK,mCAAmC,CAAC,MAAM,IAAI,aAAa,aAAa;AAC3F,QAAM,QAAQ,KAAK,oCAAoC,CAAC,MAAM,IAAI,aAAa,aAAa;AAG5F,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA,CAAC,MACC,+BAA+B,KAAK,UAAU,YAAY,2BAC1D;AAAA,MACE;AAAA,MACA;AAAA,MACA,WAAW,KAAK,UAAU,mBAAmB;AAAA,IAC/C,EAAE,KAAK,IAAI,IACX;AAAA,IACA,EAAE,QAAQ,iBAAiB,gBAAgB;AAAA,EAC/C;AAEA,WAAS,QAAQ,UAAkB,CAAC,QAAQA,QAAO,GAAkC;AACnF,UAAM,SAAS;AACf,UAAM,OAAO,MAAM,QAAQ,QAAQA,QAAO;AAC1C,UAAM,QAAQ;AACd,QAAI,UAAU,QAAQ;AACpB,YAAM,8BAA8B,KAAK,UAAU,OAAO,SAAS,CAAC;AAAA,IACtE;AACA,WAAO;AAAA,EACT;AAGA,QAAM,UAAU,WAAW,GAAG;AAChC;","names":["replace"]}